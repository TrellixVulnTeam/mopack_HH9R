import os

from .path import Path
from .shell import quote_native, ShellArguments


def _write_variable(out, name, value):
    if value is None:
        return False
    elif not isinstance(value, str):
        raise TypeError(type(value))

    out.write('{}={}\n'.format(name, value))
    return True


def _write_field(out, name, value, var_symbols={}):
    if value is None:
        return False
    elif isinstance(value, ShellArguments):
        value = ' '.join(value.fill(
            lambda s, orig: quote_native(s, force=isinstance(orig, Path)),
            **var_symbols
        ))
    elif not isinstance(value, str):
        raise TypeError(type(value))

    out.write('{}: {}\n'.format(name, value))
    return True


def generated_pkg_config_dir(pkgdir):
    return os.path.join(pkgdir, 'pkgconfig')


def write_pkg_config(out, name, *, desc='mopack-generated package',
                     version='', cflags=None, libs=None, variables={}):
    out.write('# Do not edit this file! It was automatically generated by ' +
              'mopack.\n\n')

    wrote_var = False
    for k, v in variables.items():
        wrote_var |= _write_variable(out, k, v)
    if wrote_var:
        out.write('\n')
    var_symbols = {k: '${{{}}}'.format(k) for k, v in variables.items()
                   if v is not None}

    _write_field(out, 'Name', name, var_symbols)
    _write_field(out, 'Description', desc, var_symbols)
    _write_field(out, 'Version', version, var_symbols)
    _write_field(out, 'Cflags', cflags, var_symbols)
    _write_field(out, 'Libs', libs, var_symbols)
